#version 450

#include "utils/utils.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, rg16f) uniform image2D uOutputImage;

vec2 integrate_brdf(float NdotV, float roughness) {
    vec3 V;
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024u;
    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = importance_sample_ggx(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if(NdotL > 0.0) {
            float G = geometry_smith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    return vec2(A, B);
}

void main() {
    vec2 outputImageSize = imageSize(uOutputImage);
    ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 uvId = ivec2(id.x + 1, id.y);
    vec2 uv = vec2(uvId / outputImageSize);

    vec2 integratedBRDF = integrate_brdf(uv.x, 1.0f - uv.y);

    imageStore(uOutputImage, id, vec4(integratedBRDF, 0.0, 0.0));
}
