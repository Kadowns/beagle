#version 450

#include "utils/utils.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba32f) uniform imageCube uOutputCubemap;

layout (binding = 1) uniform samplerCube uInputCubemap;

layout(push_constant) uniform PushConstantBlock {
    float roughness;
} uPushConstantBlock;

void main() {

    vec2 outputImageSize = imageSize(uOutputCubemap);
    ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec2 uv = vec2((id / outputImageSize) * 2.0f - 1.0f);

    vec3 faceDirection[6];

    faceDirection[0] = vec3(-1.0, uv.y, uv.x);
    faceDirection[1] = vec3(1.0, uv.y, -uv.x);

    faceDirection[2] = vec3(-uv.x, -1.0, -uv.y);
    faceDirection[3] = vec3(-uv.x, 1.0, uv.y);

    faceDirection[4] = vec3(-uv.x, uv.y, -1.0);
    faceDirection[5] = vec3(uv.x, uv.y, 1.0);

    for (int face = 0; face < 6; face++){

        vec3 N = -normalize(faceDirection[face]);
        vec3 R = N;
        vec3 V = R;

        const uint SAMPLE_COUNT = 1024u;
        const float roughness = uPushConstantBlock.roughness;
        float totalWeight = 0.0;
        vec3 prefilteredColor = vec3(0.0);
        for(uint i = 0u; i < SAMPLE_COUNT; i++) {

            vec2 Xi = hammersley(i, SAMPLE_COUNT);
            vec3 H  = importance_sample_ggx(Xi, N, roughness);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if(NdotL > 0.0) {

                float NdotH = max(dot(N, H), 0.0);
                float HdotV = max(dot(H, V), 0.0);

                float D = distribution_ggx(NdotH, roughness);
                float pdf = (D * NdotH / (4.0 * HdotV)) + 0.0001;

                float resolution = 512.0;
                float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
                float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
                float mipLevel = 0.5 * log2(saSample / saTexel);

                prefilteredColor += textureLod(uInputCubemap, L, mipLevel).rgb * NdotL;
                totalWeight      += NdotL;
            }
        }
        prefilteredColor = prefilteredColor / totalWeight;
        ivec3 faceId = ivec3(id, face);
        imageStore(uOutputCubemap, faceId, vec4(prefilteredColor, 1.0));
    }

}
