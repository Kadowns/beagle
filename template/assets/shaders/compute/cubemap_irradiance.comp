#version 450

#include "utils/utils.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba32f) uniform imageCube uOutputCubemap;

layout (binding = 1) uniform samplerCube uInputCubemap;

void main() {

    vec2 outputImageSize = imageSize(uOutputCubemap);
    ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec2 uv = vec2((id / outputImageSize) * 2.0f - 1.0f);

    vec3 faceDirection[6];

    faceDirection[0] = vec3(-1.0, uv.y, uv.x);
    faceDirection[1] = vec3(1.0, uv.y, -uv.x);

    faceDirection[2] = vec3(-uv.x, -1.0, -uv.y);
    faceDirection[3] = vec3(-uv.x, 1.0, uv.y);

    faceDirection[4] = vec3(-uv.x, uv.y, -1.0);
    faceDirection[5] = vec3(uv.x, uv.y, 1.0);

    for (int face = 0; face < 6; face++){
        // the sample direction equals the hemisphere's orientation
        vec3 normal = -normalize(faceDirection[face]);

        vec3 irradiance = vec3(0);

        vec3 up    = vec3(0.0, 1.0, 0.0);
        vec3 right = normalize(cross(up, normal));
        up         = normalize(cross(normal, right));

        float sampleDelta = 0.002;
        float nrSamples = 0.0;

        for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta) {
            for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta) {
                // spherical to cartesian (in tangent space)
                vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));

                // tangent space to world
                vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;
                irradiance += texture(uInputCubemap, sampleVec).rgb * cos(theta) * sin(theta);
                nrSamples++;
            }
        }
        irradiance = PI * irradiance * (1.0 / float(nrSamples));

        ivec3 faceId = ivec3(id, face);
        imageStore(uOutputCubemap, faceId, vec4(irradiance, 1.0));
    }
}
